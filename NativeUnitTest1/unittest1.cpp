#include "stdafx.h"
#include "CppUnitTest.h"

#include "PowerSolutions/PowerFlowObjectModel.h"
#include "PowerSolutions/NetworkCase.h"
#include "PowerSolutions/PowerFlowSolvers.h"
#include <iostream>
#include <memory>
#include <crtdbg.h>
#include "../PowerSolutions.PowerFlow/Export/PowerSolutions/PrimitiveNetwork.h"

using namespace PowerSolutions;
using namespace PowerSolutions::ObjectModel;
using namespace PowerSolutions::PowerFlow;
using namespace std;

using namespace Microsoft::VisualStudio::CppUnitTestFramework;

namespace PowerSolutions
{
	const char TraceFilePath[] = "TraceFile.txt";
}

namespace NativeUnitTest1
{
	TEST_CLASS(UnitTest1)
	{
	public:
		TEST_METHOD(NativeNetworkCaseCloneTest1)
		{
			//Clone Test
			_CrtSetDbgFlag(_CrtSetDbgFlag(_CRTDBG_REPORT_FLAG) | _CRTDBG_LEAK_CHECK_DF);
			NetworkCase network;
			stringstream ss;
			auto b1 = network.CreateBus(),
				b2 = network.CreateBus(),
				b3 = network.CreateBus(),
				b4 = network.CreateBus();
			network.AddObject({
				new Transformer(b1, b2, complexd(0, 0.1666666666666666666666), 0.886363636363636),
				new PVGenerator(b3, 0.2, 1.05),
				new SlackGenerator(b4, 1.05),
				new PQLoad(b2, complexd(0.5, 0.3)),
				new PQLoad(b4, complexd(0.15, 0.1)),
				new ShuntAdmittance(b2, complexd(0, 0.05)),
				new Line(b4, b3, complexd(0.260331, 0.495868), complexd(0, 0.051728)),
				new Line(b1, b4, complexd(0.173554, 0.330579), complexd(0, 0.034486)),
				new Line(b1, b3, complexd(0.130165, 0.247934), complexd(0, 0.025864)),
				new ThreeWindingTransformer(b1, b2, b3, 1, 2, 3, 5, 1, 0.5, 0.3)
			});
			//ï¿½ï¿½Â¡ï¿½ï¿½ï¿½ï¿½
			NetworkCaseTrackingInfo *info;
			auto network2 = network.Clone(info);
			for (auto& c : network.Objects())
			{
				ss << "Proto : " << typeid(*c).name() << ", " << c << "-->" << info->CloneOf(c) << endl;
			}
			for (auto& c : network2->Objects())
			{
				ss << "Clone : " << typeid(*c).name() << ", " << c << "-->" << info->PrototypeOf(c) << endl;
			}
			Logger::WriteMessage(ss.str().c_str());
			delete network2;
			delete info;
		}

		TEST_METHOD(NativePowerFlowTest1)
		{
			// TODO:  ï¿½Ú´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ô´ï¿½ï¿½ï¿?
			_CrtSetDbgFlag(_CrtSetDbgFlag(_CRTDBG_REPORT_FLAG) | _CRTDBG_LEAK_CHECK_DF);
			NetworkCase network;
			auto b1 = network.CreateBus(),
				b2 = network.CreateBus(),
				b3 = network.CreateBus(),
				b4 = network.CreateBus();
			network.AddObject({
				new Transformer(b1, b2, complexd(0, 0.1666666666666666666666), 0.886363636363636),
				new PVGenerator(b3, 0.2, 1.05),
				new SlackGenerator(b4, 1.05),
				new PQLoad(b2, complexd(0.5, 0.3)),
				new PQLoad(b4, complexd(0.15, 0.1)),
				new ShuntAdmittance(b2, complexd(0, 0.05)),
				new Line(b4, b3, complexd(0.260331, 0.495868), complexd(0, 0.051728)),
				new Line(b1, b4, complexd(0.173554, 0.330579), complexd(0, 0.034486)),
				new Line(b1, b3, complexd(0.130165, 0.247934), complexd(0, 0.025864)),
				//new ThreeWindingTransformer(b1, b2, b3, 0.001, 0.002, 0.003, 0.005, 1, 1.1, 1.5)
			});
			//for (int i = 0; i < 1000; i++)
			//	auto nc2 = shared_ptr<NetworkCase>(network.Clone());
			shared_ptr<Solver> solver(Solver::Create(SolverType::NewtonRaphson));
			solver->MaxDeviationTolerance(1e-12);
			auto s = solver->Solve(PrimitiveNetwork(network, false));
			delete s;
			s = solver->Solve(network);
			stringstream ss;
			ss << s->IterationCount() << "times , maxDev = " << (int)s->MaxDeviation() << endl;
			for (auto& item : s->NodeFlow())
			{
				ss << item.first << '\t' << abs(item.second.Voltage()) << '\t' << arg(item.second.Voltage()) << endl;
			}
			Logger::WriteMessage(ss.str().c_str());
			delete s;
		}

		// ÈýÈÆ×é±äÑ¹Æ÷²âÊÔ¡£
		TEST_METHOD(NativeTwtPowerFlowTest1)
		{
			/*
					Dim Base110 As New PerUnitBase(110, 100)
					Dim Base35 As New PerUnitBase(35, 100)
					Dim Base10 As New PerUnitBase(10, 100)
					Network.MaxDeviation = 0.0001
					With Network.Buses
					Dim b1 = .Add("1-PV", 1, Base10),
					b2 = .Add("2-Pri", 1, Base110),
					b3 = .Add("3-Load", 1, Base110),
					b4 = .Add("4-Slack", 1, Base35),
					bT = .Add("5-TwT", 1, Base110)
					ThreeWindingTransformer.Create(b2, b4, b1,
					0.01, 0.105, 0.01, 0.17, 0.01, 0.065, 1,
					110 / 35, 110 / 10, New PerUnitBase(110, 100))
					PVGenerator.Create(b1, 0.8, 1, New PerUnitBase(10, 100))
					SlackGenerator.Create(b4, 35)
					PQLoad.Create(b3, 0.8, 0.6, New PerUnitBase(110, 100))
					Line.Create(b2, b3, 0.01, 0.1, 0.001, New PerUnitBase(110, 200))
					End With

					# ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
					Attribute.Locale zh-CN
					Attribute.Name ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿?
					Attribute.Annotation Generated by PowerFlowSolver.Interop
					Attribute.Solver NR
					Attribute.NodeReorder True
					Attribute.MaxIterations 20
					Attribute.MaxDeviation 0.0001

					# Ä¸ï¿½ï¿½ï¿½Ð±ï¿½
					Bus 0,1-PV,10
					Bus 1,2-Pri,110
					Bus 2,3-Load,110
					Bus 3,4-Slack,35
					Bus 4,5-TwT,110
					# ï¿½Ô¶ï¿½ï¿½ï¿½ï¿½Éµï¿½Ä¸ï¿½ï¿½
					Bus 5,TwT-2-Pri,110

					# Ôªï¿½ï¿½ï¿½Ð±ï¿½
					# ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ¹ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Îªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ñ¹ï¿½ï¿½
					# ï¿½ï¿½È·Ö±ï¿½Î? 1, 0.318181818181818, 0.0909090909090909
					PVGenerator 0,80,10
					SlackGenerator 3,35
					PQLoad 2,80,60
					Line 1,2,0.605,6.05,1.65289256198347E-05
					# ï¿½Ô¶ï¿½ï¿½ï¿½ï¿½Éµï¿½Ôªï¿½ï¿½
					Transformer 1,5,0.605,12.705,0,0,1
					Transformer 3,5,0.06125,1.01239669421488E-08,0,0,0.318181818181818
					Transformer 0,5,0.005,0.065,0,0,0.0909090909090909

					Ä¸ï¿½ï¿½            ï¿½ï¿½Ñ¹       ï¿½ï¿½Î»     ï¿½Ð¹ï¿½ï¿½ï¿½ï¿½ï¿½   ï¿½Þ¹ï¿½ï¿½ï¿½ï¿½ï¿½   ï¿½Ð¹ï¿½ï¿½ï¿½ï¿½ï¿½   ï¿½Þ¹ï¿½ï¿½ï¿½ï¿½ï¿½  Ö§Â·ï¿½ï¿½
					[p.u.]     [ ï¿½ï¿½]      [p.u.]     [p.u.]     [p.u.]     [p.u.]
					[#0]1-PV        10         3.244665   80        -3.916739      -          -           1
					[#1]2-Pri        100.6982  -4.847346      -          -          -          -           2
					[#2]3-Load       96.32472  -7.4931     4.85e-009     -       80         60             1
					[#3]4-Slack       35            -       2.011347   88.1072       -          -           1
					[#4]5-TwT       Ä¸ï¿½ï¿½Î´ï¿½ï¿½ï¿½ï¿½ÏµÍ³ï¿½ï¿½
					[#5]TwT-2-Pri      109.99     0.2524323     -          -          -          -           3
			*/
			_CrtSetDbgFlag(_CrtSetDbgFlag(_CRTDBG_REPORT_FLAG) | _CRTDBG_LEAK_CHECK_DF);
			NetworkCase network;
			auto b1 = network.CreateBus(10),
				b2 = network.CreateBus(110),
				b3 = network.CreateBus(110),
				b4 = network.CreateBus(35);
			network.AddObject({
				new PVGenerator(b1, 80, 10),
				new SlackGenerator(b4, 35),
				new PQLoad(b3, complexd(80, 60)),
				new Line(b2, b3, complexd(0.605, 6.05), complexd(0, 1.65289256198347E-05)),
				new ThreeWindingTransformer(b2, b4, b1, complexd(1.21, 12.705), complexd(1.21, 20.57),
				complexd(1.21, 7.865), 0, 1, 1 / 0.318181818181818, 1 / 0.0909090909090909)
			});
			shared_ptr<Solver> solver(Solver::Create(SolverType::NewtonRaphson));
			solver->MaxDeviationTolerance(1e-12);
			auto s = solver->Solve(PrimitiveNetwork(network, false));
			stringstream ss;
			ss << s->IterationCount() << "times , maxDev = " << (int)s->MaxDeviation() << endl;
			for (auto& item : s->NodeFlow())
			{
				ss << item.first << '\t' << abs(item.second.Voltage()) << '\t' << arg(item.second.Voltage()) << endl;
			}
			Logger::WriteMessage(ss.str().c_str());
			delete s;
		}

		TEST_METHOD(NativePrimitiveNetworkSubTest)
		{
			// TODO:  ÔÚ´ËÊäÈë²âÊÔ´úÂë
			_CrtSetDbgFlag(_CrtSetDbgFlag(_CRTDBG_REPORT_FLAG) | _CRTDBG_LEAK_CHECK_DF);
			NetworkCase network;
			auto b1 = network.CreateBus(),
				b2 = network.CreateBus(),
				b3 = network.CreateBus(),
				b4 = network.CreateBus();
			network.AddObject({
				new Transformer(b1, b2, complexd(0, 0.1666666666666666666666), 0.886363636363636),
				new PVGenerator(b3, 0.2, 1.05),
				new SlackGenerator(b4, 1.05),
				new PQLoad(b2, complexd(0.5, 0.3)),
				new PQLoad(b4, complexd(0.15, 0.1)),
				new ShuntAdmittance(b2, complexd(0, 0.05)),
				new Line(b4, b3, complexd(0.260331, 0.495868), complexd(0, 0.051728)),
				new Line(b1, b4, complexd(0.173554, 0.330579), complexd(0, 0.034486)),
				new Line(b1, b3, complexd(0.130165, 0.247934), complexd(0, 0.025864))//,
				//new ThreeWindingTransformer(b1, b2, b3, 0.001, 0.002, 0.003, 0.005, 1, 1.1, 1.5)
			});
			//¹¹ÔìÒ»¸öÏàÍ¬µÄÍøÂç¡£
			shared_ptr<NetworkCase> network2(network.Clone());
			NetworkObject* sg;
			for (auto& obj : network2->Objects())
			{
				if (dynamic_cast<SlackGenerator*>(obj) == nullptr)
					network.AddObject(obj);
				else
					sg = obj;
			}
			network2->RemoveObject(sg);
			network2->AutoDeleteChildren(false);
			PrimitiveNetwork pn(network, false);
			stringstream ss;
			auto PrintNetwork = [&ss](const PrimitiveNetwork& pn)
			{
				for (auto& node : pn.Nodes())
					ss << "Node #" << node->Index() << "\t" << node->Bus() << endl;
				for (auto& b : pn.Branches())
					ss << "Branch #" << b->Index() << "\t" <<
					b->Nodes().first->Bus() << " -- " << b->Nodes().second->Bus() << endl;
				ss << pn.Admittance << endl << endl;
			};
			ss << "Ô­Ê¼ÍøÂç" << endl;
			PrintNetwork(pn);
			auto subPN = pn.ConnectedSubsets();
			for (auto& sn : subPN)
			{
				ss << "×ÓÍøÂç" << endl;
				PrintNetwork(*sn);
			}
			Logger::WriteMessage(ss.str().c_str());
		}
	};
}